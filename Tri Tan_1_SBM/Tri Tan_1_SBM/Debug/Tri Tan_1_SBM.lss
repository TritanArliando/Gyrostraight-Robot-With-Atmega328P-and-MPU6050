
Tri Tan_1_SBM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e22  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000e96  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ec8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000f08  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001257  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000976  00000000  00000000  0000224f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000959  00000000  00000000  00002bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b0  00000000  00000000  00003520  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000062a  00000000  00000000  000037d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4a  00000000  00000000  00003dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00004844  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  68:	08 4a       	sbci	r16, 0xA8	; 168
  6a:	d7 3b       	cpi	r29, 0xB7	; 183
  6c:	3b ce       	rjmp	.-906    	; 0xfffffce4 <__eeprom_end+0xff7efce4>
  6e:	01 6e       	ori	r16, 0xE1	; 225
  70:	84 bc       	out	0x24, r8	; 36
  72:	bf fd       	.word	0xfdbf	; ????
  74:	c1 2f       	mov	r28, r17
  76:	3d 6c       	ori	r19, 0xCD	; 205
  78:	74 31       	cpi	r23, 0x14	; 20
  7a:	9a bd       	out	0x2a, r25	; 42
  7c:	56 83       	std	Z+6, r21	; 0x06
  7e:	3d da       	rcall	.-2950   	; 0xfffff4fa <__eeprom_end+0xff7ef4fa>
  80:	3d 00       	.word	0x003d	; ????
  82:	c7 7f       	andi	r28, 0xF7	; 247
  84:	11 be       	out	0x31, r1	; 49
  86:	d9 e4       	ldi	r29, 0x49	; 73
  88:	bb 4c       	sbci	r27, 0xCB	; 203
  8a:	3e 91       	ld	r19, -X
  8c:	6b aa       	std	Y+51, r6	; 0x33
  8e:	aa be       	out	0x3a, r10	; 58
  90:	00 00       	nop
  92:	00 80       	ld	r0, Z
  94:	3f 00       	.word	0x003f	; ????

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_clear_bss>:
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
  aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
  ac:	a8 30       	cpi	r26, 0x08	; 8
  ae:	b2 07       	cpc	r27, r18
  b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
  b2:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <main>
  b6:	0c 94 0f 07 	jmp	0xe1e	; 0xe1e <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
  be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  c2:	88 e4       	ldi	r24, 0x48	; 72
  c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  c8:	08 95       	ret

000000ca <I2C_Start>:
  ca:	94 ea       	ldi	r25, 0xA4	; 164
  cc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d4:	99 23       	and	r25, r25
  d6:	e4 f7       	brge	.-8      	; 0xd0 <I2C_Start+0x6>
  d8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  dc:	98 7f       	andi	r25, 0xF8	; 248
  de:	98 30       	cpi	r25, 0x08	; 8
  e0:	91 f4       	brne	.+36     	; 0x106 <I2C_Start+0x3c>
  e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  e6:	84 e8       	ldi	r24, 0x84	; 132
  e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	88 23       	and	r24, r24
  f2:	e4 f7       	brge	.-8      	; 0xec <I2C_Start+0x22>
  f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  f8:	88 7f       	andi	r24, 0xF8	; 248
  fa:	88 31       	cpi	r24, 0x18	; 24
  fc:	31 f0       	breq	.+12     	; 0x10a <I2C_Start+0x40>
  fe:	80 32       	cpi	r24, 0x20	; 32
 100:	31 f4       	brne	.+12     	; 0x10e <I2C_Start+0x44>
 102:	82 e0       	ldi	r24, 0x02	; 2
 104:	08 95       	ret
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	08 95       	ret

00000112 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
 112:	84 e9       	ldi	r24, 0x94	; 148
 114:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
 118:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11c:	84 fd       	sbrc	r24, 4
 11e:	fc cf       	rjmp	.-8      	; 0x118 <I2C_Stop+0x6>
}
 120:	08 95       	ret

00000122 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
 122:	cf 93       	push	r28
 124:	c8 2f       	mov	r28, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
 126:	84 ea       	ldi	r24, 0xA4	; 164
 128:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
 12c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 130:	88 23       	and	r24, r24
 132:	e4 f7       	brge	.-8      	; 0x12c <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 134:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 138:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
 13a:	88 30       	cpi	r24, 0x08	; 8
 13c:	a1 f7       	brne	.-24     	; 0x126 <I2C_Start_Wait+0x4>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
 13e:	c0 93 bb 00 	sts	0x00BB, r28	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
 142:	84 e8       	ldi	r24, 0x84	; 132
 144:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
 148:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 14c:	88 23       	and	r24, r24
 14e:	e4 f7       	brge	.-8      	; 0x148 <I2C_Start_Wait+0x26>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
 150:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 154:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
 156:	88 31       	cpi	r24, 0x18	; 24
 158:	19 f0       	breq	.+6      	; 0x160 <I2C_Start_Wait+0x3e>
		{
			I2C_Stop();										/* If not then generate stop condition */
 15a:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
			continue;										/* continue with start loop again */
 15e:	e3 cf       	rjmp	.-58     	; 0x126 <I2C_Start_Wait+0x4>
		}
		break;												/* If yes then break loop */
	}
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
 164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
 168:	84 e8       	ldi	r24, 0x84	; 132
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
 16e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 172:	88 23       	and	r24, r24
 174:	e4 f7       	brge	.-8      	; 0x16e <I2C_Write+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
 176:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 17a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
 17c:	88 32       	cpi	r24, 0x28	; 40
 17e:	21 f0       	breq	.+8      	; 0x188 <I2C_Write+0x24>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
 180:	80 33       	cpi	r24, 0x30	; 48
 182:	21 f4       	brne	.+8      	; 0x18c <I2C_Write+0x28>
	return 1;												/* If yes then return 1 to indicate nack received */
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
 18c:	82 e0       	ldi	r24, 0x02	; 2
}
 18e:	08 95       	ret

00000190 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
 190:	84 ec       	ldi	r24, 0xC4	; 196
 192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 196:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 19a:	88 23       	and	r24, r24
 19c:	e4 f7       	brge	.-8      	; 0x196 <I2C_Read_Ack+0x6>
	return TWDR;											/* Return received data */
 19e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}	
 1a2:	08 95       	ret

000001a4 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
 1a4:	84 e8       	ldi	r24, 0x84	; 132
 1a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
 1aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ae:	88 23       	and	r24, r24
 1b0:	e4 f7       	brge	.-8      	; 0x1aa <I2C_Read_Nack+0x6>
	return TWDR;											/* Return received data */
 1b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}	
 1b6:	08 95       	ret

000001b8 <MPU6050_Init>:
}

void Motor_Stop()
{
	PORTD &= ~((1 << IN1) | (1 << IN2));
	PORTB &= ~((1 << IN3) | (1 << IN4));
 1b8:	80 ed       	ldi	r24, 0xD0	; 208
 1ba:	0e 94 91 00 	call	0x122	; 0x122 <I2C_Start_Wait>
 1be:	8b e6       	ldi	r24, 0x6B	; 107
 1c0:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 1ca:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
 1ce:	80 ed       	ldi	r24, 0xD0	; 208
 1d0:	0e 94 91 00 	call	0x122	; 0x122 <I2C_Start_Wait>
 1d4:	89 e1       	ldi	r24, 0x19	; 25
 1d6:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 1e0:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
 1e4:	80 ed       	ldi	r24, 0xD0	; 208
 1e6:	0e 94 91 00 	call	0x122	; 0x122 <I2C_Start_Wait>
 1ea:	8a e1       	ldi	r24, 0x1A	; 26
 1ec:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 1f6:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
 1fa:	80 ed       	ldi	r24, 0xD0	; 208
 1fc:	0e 94 91 00 	call	0x122	; 0x122 <I2C_Start_Wait>
 200:	8b e1       	ldi	r24, 0x1B	; 27
 202:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 206:	88 e1       	ldi	r24, 0x18	; 24
 208:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 20c:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
 210:	80 ed       	ldi	r24, 0xD0	; 208
 212:	0e 94 91 00 	call	0x122	; 0x122 <I2C_Start_Wait>
 216:	8c e1       	ldi	r24, 0x1C	; 28
 218:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 222:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
 226:	08 95       	ret

00000228 <MPU6050_Read_RawData>:
 228:	6f 92       	push	r6
 22a:	7f 92       	push	r7
 22c:	8f 92       	push	r8
 22e:	9f 92       	push	r9
 230:	af 92       	push	r10
 232:	bf 92       	push	r11
 234:	cf 92       	push	r12
 236:	df 92       	push	r13
 238:	ef 92       	push	r14
 23a:	ff 92       	push	r15
 23c:	0f 93       	push	r16
 23e:	1f 93       	push	r17
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	5c 01       	movw	r10, r24
 246:	6b 01       	movw	r12, r22
 248:	4a 01       	movw	r8, r20
 24a:	39 01       	movw	r6, r18
 24c:	80 ed       	ldi	r24, 0xD0	; 208
 24e:	0e 94 91 00 	call	0x122	; 0x122 <I2C_Start_Wait>
 252:	8b e3       	ldi	r24, 0x3B	; 59
 254:	0e 94 b2 00 	call	0x164	; 0x164 <I2C_Write>
 258:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
 25c:	81 ed       	ldi	r24, 0xD1	; 209
 25e:	0e 94 65 00 	call	0xca	; 0xca <I2C_Start>
 262:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 266:	c8 2f       	mov	r28, r24
 268:	d0 e0       	ldi	r29, 0x00	; 0
 26a:	dc 2f       	mov	r29, r28
 26c:	cc 27       	eor	r28, r28
 26e:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 272:	c8 2b       	or	r28, r24
 274:	f5 01       	movw	r30, r10
 276:	d1 83       	std	Z+1, r29	; 0x01
 278:	c0 83       	st	Z, r28
 27a:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 27e:	c8 2f       	mov	r28, r24
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	dc 2f       	mov	r29, r28
 284:	cc 27       	eor	r28, r28
 286:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 28a:	c8 2b       	or	r28, r24
 28c:	f6 01       	movw	r30, r12
 28e:	d1 83       	std	Z+1, r29	; 0x01
 290:	c0 83       	st	Z, r28
 292:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 296:	c8 2f       	mov	r28, r24
 298:	d0 e0       	ldi	r29, 0x00	; 0
 29a:	dc 2f       	mov	r29, r28
 29c:	cc 27       	eor	r28, r28
 29e:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 2a2:	c8 2b       	or	r28, r24
 2a4:	f4 01       	movw	r30, r8
 2a6:	d1 83       	std	Z+1, r29	; 0x01
 2a8:	c0 83       	st	Z, r28
 2aa:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 2ae:	c8 2f       	mov	r28, r24
 2b0:	d0 e0       	ldi	r29, 0x00	; 0
 2b2:	dc 2f       	mov	r29, r28
 2b4:	cc 27       	eor	r28, r28
 2b6:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 2ba:	c8 2b       	or	r28, r24
 2bc:	f3 01       	movw	r30, r6
 2be:	d1 83       	std	Z+1, r29	; 0x01
 2c0:	c0 83       	st	Z, r28
 2c2:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 2c6:	c8 2f       	mov	r28, r24
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	dc 2f       	mov	r29, r28
 2cc:	cc 27       	eor	r28, r28
 2ce:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 2d2:	c8 2b       	or	r28, r24
 2d4:	f8 01       	movw	r30, r16
 2d6:	d1 83       	std	Z+1, r29	; 0x01
 2d8:	c0 83       	st	Z, r28
 2da:	0e 94 c8 00 	call	0x190	; 0x190 <I2C_Read_Ack>
 2de:	c8 2f       	mov	r28, r24
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	dc 2f       	mov	r29, r28
 2e4:	cc 27       	eor	r28, r28
 2e6:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <I2C_Read_Nack>
 2ea:	c8 2b       	or	r28, r24
 2ec:	f7 01       	movw	r30, r14
 2ee:	d1 83       	std	Z+1, r29	; 0x01
 2f0:	c0 83       	st	Z, r28
 2f2:	0e 94 89 00 	call	0x112	; 0x112 <I2C_Stop>
 2f6:	df 91       	pop	r29
 2f8:	cf 91       	pop	r28
 2fa:	1f 91       	pop	r17
 2fc:	0f 91       	pop	r16
 2fe:	ff 90       	pop	r15
 300:	ef 90       	pop	r14
 302:	df 90       	pop	r13
 304:	cf 90       	pop	r12
 306:	bf 90       	pop	r11
 308:	af 90       	pop	r10
 30a:	9f 90       	pop	r9
 30c:	8f 90       	pop	r8
 30e:	7f 90       	pop	r7
 310:	6f 90       	pop	r6
 312:	08 95       	ret

00000314 <MPU6050_Calibrate>:
 314:	2f 92       	push	r2
 316:	3f 92       	push	r3
 318:	4f 92       	push	r4
 31a:	5f 92       	push	r5
 31c:	6f 92       	push	r6
 31e:	7f 92       	push	r7
 320:	8f 92       	push	r8
 322:	9f 92       	push	r9
 324:	af 92       	push	r10
 326:	bf 92       	push	r11
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	64 97       	sbiw	r28, 0x14	; 20
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
 348:	1c 01       	movw	r2, r24
 34a:	7a 8b       	std	Y+18, r23	; 0x12
 34c:	69 8b       	std	Y+17, r22	; 0x11
 34e:	5c 8b       	std	Y+20, r21	; 0x14
 350:	4b 8b       	std	Y+19, r20	; 0x13
 352:	c1 2c       	mov	r12, r1
 354:	d1 2c       	mov	r13, r1
 356:	81 2c       	mov	r8, r1
 358:	91 2c       	mov	r9, r1
 35a:	54 01       	movw	r10, r8
 35c:	41 2c       	mov	r4, r1
 35e:	51 2c       	mov	r5, r1
 360:	32 01       	movw	r6, r4
 362:	1d 86       	std	Y+13, r1	; 0x0d
 364:	1e 86       	std	Y+14, r1	; 0x0e
 366:	1f 86       	std	Y+15, r1	; 0x0f
 368:	18 8a       	std	Y+16, r1	; 0x10
 36a:	42 c0       	rjmp	.+132    	; 0x3f0 <MPU6050_Calibrate+0xdc>
 36c:	9e 01       	movw	r18, r28
 36e:	2f 5f       	subi	r18, 0xFF	; 255
 370:	3f 4f       	sbci	r19, 0xFF	; 255
 372:	79 01       	movw	r14, r18
 374:	8e 01       	movw	r16, r28
 376:	0d 5f       	subi	r16, 0xFD	; 253
 378:	1f 4f       	sbci	r17, 0xFF	; 255
 37a:	2c 5f       	subi	r18, 0xFC	; 252
 37c:	3f 4f       	sbci	r19, 0xFF	; 255
 37e:	ae 01       	movw	r20, r28
 380:	49 5f       	subi	r20, 0xF9	; 249
 382:	5f 4f       	sbci	r21, 0xFF	; 255
 384:	be 01       	movw	r22, r28
 386:	67 5f       	subi	r22, 0xF7	; 247
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	ce 01       	movw	r24, r28
 38c:	0b 96       	adiw	r24, 0x0b	; 11
 38e:	0e 94 14 01 	call	0x228	; 0x228 <MPU6050_Read_RawData>
 392:	8d 81       	ldd	r24, Y+5	; 0x05
 394:	9e 81       	ldd	r25, Y+6	; 0x06
 396:	09 2e       	mov	r0, r25
 398:	00 0c       	add	r0, r0
 39a:	aa 0b       	sbc	r26, r26
 39c:	bb 0b       	sbc	r27, r27
 39e:	2d 85       	ldd	r18, Y+13	; 0x0d
 3a0:	3e 85       	ldd	r19, Y+14	; 0x0e
 3a2:	4f 85       	ldd	r20, Y+15	; 0x0f
 3a4:	58 89       	ldd	r21, Y+16	; 0x10
 3a6:	28 0f       	add	r18, r24
 3a8:	39 1f       	adc	r19, r25
 3aa:	4a 1f       	adc	r20, r26
 3ac:	5b 1f       	adc	r21, r27
 3ae:	2d 87       	std	Y+13, r18	; 0x0d
 3b0:	3e 87       	std	Y+14, r19	; 0x0e
 3b2:	4f 87       	std	Y+15, r20	; 0x0f
 3b4:	58 8b       	std	Y+16, r21	; 0x10
 3b6:	8b 81       	ldd	r24, Y+3	; 0x03
 3b8:	9c 81       	ldd	r25, Y+4	; 0x04
 3ba:	09 2e       	mov	r0, r25
 3bc:	00 0c       	add	r0, r0
 3be:	aa 0b       	sbc	r26, r26
 3c0:	bb 0b       	sbc	r27, r27
 3c2:	48 0e       	add	r4, r24
 3c4:	59 1e       	adc	r5, r25
 3c6:	6a 1e       	adc	r6, r26
 3c8:	7b 1e       	adc	r7, r27
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	9a 81       	ldd	r25, Y+2	; 0x02
 3ce:	09 2e       	mov	r0, r25
 3d0:	00 0c       	add	r0, r0
 3d2:	aa 0b       	sbc	r26, r26
 3d4:	bb 0b       	sbc	r27, r27
 3d6:	88 0e       	add	r8, r24
 3d8:	99 1e       	adc	r9, r25
 3da:	aa 1e       	adc	r10, r26
 3dc:	bb 1e       	adc	r11, r27
 3de:	8f e9       	ldi	r24, 0x9F	; 159
 3e0:	9f e0       	ldi	r25, 0x0F	; 15
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <MPU6050_Calibrate+0xce>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <MPU6050_Calibrate+0xd4>
 3e8:	00 00       	nop
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
 3ec:	c9 1a       	sub	r12, r25
 3ee:	d9 0a       	sbc	r13, r25
 3f0:	e8 ee       	ldi	r30, 0xE8	; 232
 3f2:	ce 16       	cp	r12, r30
 3f4:	e3 e0       	ldi	r30, 0x03	; 3
 3f6:	de 06       	cpc	r13, r30
 3f8:	0c f4       	brge	.+2      	; 0x3fc <MPU6050_Calibrate+0xe8>
 3fa:	b8 cf       	rjmp	.-144    	; 0x36c <MPU6050_Calibrate+0x58>
 3fc:	0f 2e       	mov	r0, r31
 3fe:	f8 ee       	ldi	r31, 0xE8	; 232
 400:	cf 2e       	mov	r12, r31
 402:	f3 e0       	ldi	r31, 0x03	; 3
 404:	df 2e       	mov	r13, r31
 406:	e1 2c       	mov	r14, r1
 408:	f1 2c       	mov	r15, r1
 40a:	f0 2d       	mov	r31, r0
 40c:	6d 85       	ldd	r22, Y+13	; 0x0d
 40e:	7e 85       	ldd	r23, Y+14	; 0x0e
 410:	8f 85       	ldd	r24, Y+15	; 0x0f
 412:	98 89       	ldd	r25, Y+16	; 0x10
 414:	a7 01       	movw	r20, r14
 416:	96 01       	movw	r18, r12
 418:	0e 94 f0 06 	call	0xde0	; 0xde0 <__divmodsi4>
 41c:	f1 01       	movw	r30, r2
 41e:	31 83       	std	Z+1, r19	; 0x01
 420:	20 83       	st	Z, r18
 422:	c3 01       	movw	r24, r6
 424:	b2 01       	movw	r22, r4
 426:	a7 01       	movw	r20, r14
 428:	96 01       	movw	r18, r12
 42a:	0e 94 f0 06 	call	0xde0	; 0xde0 <__divmodsi4>
 42e:	e9 89       	ldd	r30, Y+17	; 0x11
 430:	fa 89       	ldd	r31, Y+18	; 0x12
 432:	31 83       	std	Z+1, r19	; 0x01
 434:	20 83       	st	Z, r18
 436:	c5 01       	movw	r24, r10
 438:	b4 01       	movw	r22, r8
 43a:	a7 01       	movw	r20, r14
 43c:	96 01       	movw	r18, r12
 43e:	0e 94 f0 06 	call	0xde0	; 0xde0 <__divmodsi4>
 442:	eb 89       	ldd	r30, Y+19	; 0x13
 444:	fc 89       	ldd	r31, Y+20	; 0x14
 446:	31 83       	std	Z+1, r19	; 0x01
 448:	20 83       	st	Z, r18
 44a:	64 96       	adiw	r28, 0x14	; 20
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	0f 91       	pop	r16
 45e:	ff 90       	pop	r15
 460:	ef 90       	pop	r14
 462:	df 90       	pop	r13
 464:	cf 90       	pop	r12
 466:	bf 90       	pop	r11
 468:	af 90       	pop	r10
 46a:	9f 90       	pop	r9
 46c:	8f 90       	pop	r8
 46e:	7f 90       	pop	r7
 470:	6f 90       	pop	r6
 472:	5f 90       	pop	r5
 474:	4f 90       	pop	r4
 476:	3f 90       	pop	r3
 478:	2f 90       	pop	r2
 47a:	08 95       	ret

0000047c <PWM_Init>:
 47c:	8a b1       	in	r24, 0x0a	; 10
 47e:	88 66       	ori	r24, 0x68	; 104
 480:	8a b9       	out	0x0a, r24	; 10
 482:	84 b1       	in	r24, 0x04	; 4
 484:	8e 60       	ori	r24, 0x0E	; 14
 486:	84 b9       	out	0x04, r24	; 4
 488:	84 b5       	in	r24, 0x24	; 36
 48a:	83 68       	ori	r24, 0x83	; 131
 48c:	84 bd       	out	0x24, r24	; 36
 48e:	85 b5       	in	r24, 0x25	; 37
 490:	82 60       	ori	r24, 0x02	; 2
 492:	85 bd       	out	0x25, r24	; 37
 494:	e0 eb       	ldi	r30, 0xB0	; 176
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	83 62       	ori	r24, 0x23	; 35
 49c:	80 83       	st	Z, r24
 49e:	e1 eb       	ldi	r30, 0xB1	; 177
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	80 83       	st	Z, r24
 4a8:	08 95       	ret

000004aa <Motor_SetSpeed>:
 4aa:	87 bd       	out	0x27, r24	; 39
 4ac:	60 93 b4 00 	sts	0x00B4, r22	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 4b0:	08 95       	ret

000004b2 <Motor_SetDirection>:
 4b2:	88 23       	and	r24, r24
 4b4:	69 f0       	breq	.+26     	; 0x4d0 <Motor_SetDirection+0x1e>
 4b6:	8b b1       	in	r24, 0x0b	; 11
 4b8:	80 64       	ori	r24, 0x40	; 64
 4ba:	8b b9       	out	0x0b, r24	; 11
 4bc:	8b b1       	in	r24, 0x0b	; 11
 4be:	8f 7d       	andi	r24, 0xDF	; 223
 4c0:	8b b9       	out	0x0b, r24	; 11
 4c2:	85 b1       	in	r24, 0x05	; 5
 4c4:	82 60       	ori	r24, 0x02	; 2
 4c6:	85 b9       	out	0x05, r24	; 5
 4c8:	85 b1       	in	r24, 0x05	; 5
 4ca:	8b 7f       	andi	r24, 0xFB	; 251
 4cc:	85 b9       	out	0x05, r24	; 5
 4ce:	08 95       	ret
 4d0:	8b b1       	in	r24, 0x0b	; 11
 4d2:	8f 7b       	andi	r24, 0xBF	; 191
 4d4:	8b b9       	out	0x0b, r24	; 11
 4d6:	8b b1       	in	r24, 0x0b	; 11
 4d8:	80 62       	ori	r24, 0x20	; 32
 4da:	8b b9       	out	0x0b, r24	; 11
 4dc:	85 b1       	in	r24, 0x05	; 5
 4de:	8d 7f       	andi	r24, 0xFD	; 253
 4e0:	85 b9       	out	0x05, r24	; 5
 4e2:	85 b1       	in	r24, 0x05	; 5
 4e4:	84 60       	ori	r24, 0x04	; 4
 4e6:	85 b9       	out	0x05, r24	; 5
 4e8:	08 95       	ret

000004ea <PID_Controller>:
}

/* PID controller function */
float PID_Controller(float setpoint, float measured, float* previous_error, float* integral)
{
 4ea:	4f 92       	push	r4
 4ec:	5f 92       	push	r5
 4ee:	6f 92       	push	r6
 4f0:	7f 92       	push	r7
 4f2:	8f 92       	push	r8
 4f4:	9f 92       	push	r9
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	cf 92       	push	r12
 4fc:	df 92       	push	r13
 4fe:	ef 92       	push	r14
 500:	ff 92       	push	r15
 502:	0f 93       	push	r16
 504:	1f 93       	push	r17
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	e8 01       	movw	r28, r16
 50c:	87 01       	movw	r16, r14
	float error = setpoint - measured;
 50e:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__subsf3>
 512:	6b 01       	movw	r12, r22
 514:	7c 01       	movw	r14, r24
	*integral += error * 0.01;
 516:	2a e0       	ldi	r18, 0x0A	; 10
 518:	37 ed       	ldi	r19, 0xD7	; 215
 51a:	43 e2       	ldi	r20, 0x23	; 35
 51c:	5c e3       	ldi	r21, 0x3C	; 60
 51e:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 522:	f8 01       	movw	r30, r16
 524:	20 81       	ld	r18, Z
 526:	31 81       	ldd	r19, Z+1	; 0x01
 528:	42 81       	ldd	r20, Z+2	; 0x02
 52a:	53 81       	ldd	r21, Z+3	; 0x03
 52c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__addsf3>
 530:	4b 01       	movw	r8, r22
 532:	5c 01       	movw	r10, r24
 534:	f8 01       	movw	r30, r16
 536:	60 83       	st	Z, r22
 538:	71 83       	std	Z+1, r23	; 0x01
 53a:	82 83       	std	Z+2, r24	; 0x02
 53c:	93 83       	std	Z+3, r25	; 0x03
	float derivative = (error - *previous_error) / 0.01;
 53e:	28 81       	ld	r18, Y
 540:	39 81       	ldd	r19, Y+1	; 0x01
 542:	4a 81       	ldd	r20, Y+2	; 0x02
 544:	5b 81       	ldd	r21, Y+3	; 0x03
 546:	c7 01       	movw	r24, r14
 548:	b6 01       	movw	r22, r12
 54a:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__subsf3>
 54e:	2a e0       	ldi	r18, 0x0A	; 10
 550:	37 ed       	ldi	r19, 0xD7	; 215
 552:	43 e2       	ldi	r20, 0x23	; 35
 554:	5c e3       	ldi	r21, 0x3C	; 60
 556:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__divsf3>
 55a:	2b 01       	movw	r4, r22
 55c:	3c 01       	movw	r6, r24
	float output = Kp * error + Ki * *integral + Kd * derivative;
 55e:	20 e0       	ldi	r18, 0x00	; 0
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	a9 01       	movw	r20, r18
 564:	c5 01       	movw	r24, r10
 566:	b4 01       	movw	r22, r8
 568:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 56c:	9b 01       	movw	r18, r22
 56e:	ac 01       	movw	r20, r24
 570:	c7 01       	movw	r24, r14
 572:	b6 01       	movw	r22, r12
 574:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__addsf3>
 578:	4b 01       	movw	r8, r22
 57a:	5c 01       	movw	r10, r24
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	a9 01       	movw	r20, r18
 582:	c3 01       	movw	r24, r6
 584:	b2 01       	movw	r22, r4
 586:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 58a:	9b 01       	movw	r18, r22
 58c:	ac 01       	movw	r20, r24
 58e:	c5 01       	movw	r24, r10
 590:	b4 01       	movw	r22, r8
 592:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__addsf3>
	*previous_error = error;
 596:	c8 82       	st	Y, r12
 598:	d9 82       	std	Y+1, r13	; 0x01
 59a:	ea 82       	std	Y+2, r14	; 0x02
 59c:	fb 82       	std	Y+3, r15	; 0x03
	return output;
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	1f 91       	pop	r17
 5a4:	0f 91       	pop	r16
 5a6:	ff 90       	pop	r15
 5a8:	ef 90       	pop	r14
 5aa:	df 90       	pop	r13
 5ac:	cf 90       	pop	r12
 5ae:	bf 90       	pop	r11
 5b0:	af 90       	pop	r10
 5b2:	9f 90       	pop	r9
 5b4:	8f 90       	pop	r8
 5b6:	7f 90       	pop	r7
 5b8:	6f 90       	pop	r6
 5ba:	5f 90       	pop	r5
 5bc:	4f 90       	pop	r4
 5be:	08 95       	ret

000005c0 <main>:
/* Global variables for PID control */
float previous_error = 0.0;
float integral = 0.0;

int main(void)
{
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	cd b7       	in	r28, 0x3d	; 61
 5c6:	de b7       	in	r29, 0x3e	; 62
 5c8:	62 97       	sbiw	r28, 0x12	; 18
 5ca:	0f b6       	in	r0, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	de bf       	out	0x3e, r29	; 62
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	cd bf       	out	0x3d, r28	; 61
	int16_t AccelX, AccelY, AccelZ, GyroX, GyroY, GyroZ;
	int16_t gyroX_offset = 0, gyroY_offset = 0, gyroZ_offset = 0;
 5d4:	1e 86       	std	Y+14, r1	; 0x0e
 5d6:	1d 86       	std	Y+13, r1	; 0x0d
 5d8:	18 8a       	std	Y+16, r1	; 0x10
 5da:	1f 86       	std	Y+15, r1	; 0x0f
 5dc:	1a 8a       	std	Y+18, r1	; 0x12
 5de:	19 8a       	std	Y+17, r1	; 0x11
	float angle = 0.0, setpoint = 0.0;
	uint8_t left_pwm_value = 255;
	uint8_t right_pwm_value = 255;

	/* Initialize modules */
	I2C_Init();
 5e0:	0e 94 5f 00 	call	0xbe	; 0xbe <I2C_Init>
	MPU6050_Init();
 5e4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <MPU6050_Init>
	MPU6050_Calibrate(&gyroX_offset, &gyroY_offset, &gyroZ_offset);
 5e8:	ae 01       	movw	r20, r28
 5ea:	4f 5e       	subi	r20, 0xEF	; 239
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	be 01       	movw	r22, r28
 5f0:	61 5f       	subi	r22, 0xF1	; 241
 5f2:	7f 4f       	sbci	r23, 0xFF	; 255
 5f4:	ce 01       	movw	r24, r28
 5f6:	0d 96       	adiw	r24, 0x0d	; 13
 5f8:	0e 94 8a 01 	call	0x314	; 0x314 <MPU6050_Calibrate>
	PWM_Init();
 5fc:	0e 94 3e 02 	call	0x47c	; 0x47c <PWM_Init>
	USART_Init(9600);
 600:	60 e8       	ldi	r22, 0x80	; 128
 602:	75 e2       	ldi	r23, 0x25	; 37
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 c3 03 	call	0x786	; 0x786 <USART_Init>

	/* Initial motor speed */
	Motor_SetSpeed(left_pwm_value, right_pwm_value);
 60c:	6f ef       	ldi	r22, 0xFF	; 255
 60e:	8f ef       	ldi	r24, 0xFF	; 255
 610:	0e 94 55 02 	call	0x4aa	; 0x4aa <Motor_SetSpeed>
	Motor_SetDirection(true);
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Motor_SetDirection>

int main(void)
{
	int16_t AccelX, AccelY, AccelZ, GyroX, GyroY, GyroZ;
	int16_t gyroX_offset = 0, gyroY_offset = 0, gyroZ_offset = 0;
	float angle = 0.0, setpoint = 0.0;
 61a:	81 2c       	mov	r8, r1
 61c:	91 2c       	mov	r9, r1
 61e:	54 01       	movw	r10, r8
	Motor_SetDirection(true);

	while(1)
	{
		/* Read raw data from MPU6050 */
		MPU6050_Read_RawData(&AccelX, &AccelY, &AccelZ, &GyroX, &GyroY, &GyroZ);
 620:	ce 01       	movw	r24, r28
 622:	0b 96       	adiw	r24, 0x0b	; 11
 624:	7c 01       	movw	r14, r24
 626:	8e 01       	movw	r16, r28
 628:	07 5f       	subi	r16, 0xF7	; 247
 62a:	1f 4f       	sbci	r17, 0xFF	; 255
 62c:	9e 01       	movw	r18, r28
 62e:	29 5f       	subi	r18, 0xF9	; 249
 630:	3f 4f       	sbci	r19, 0xFF	; 255
 632:	ae 01       	movw	r20, r28
 634:	4b 5f       	subi	r20, 0xFB	; 251
 636:	5f 4f       	sbci	r21, 0xFF	; 255
 638:	be 01       	movw	r22, r28
 63a:	6d 5f       	subi	r22, 0xFD	; 253
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	0a 97       	sbiw	r24, 0x0a	; 10
 640:	0e 94 14 01 	call	0x228	; 0x228 <MPU6050_Read_RawData>

		/* Apply gyro offsets */
		GyroX -= gyroX_offset;
 644:	6f 81       	ldd	r22, Y+7	; 0x07
 646:	78 85       	ldd	r23, Y+8	; 0x08
 648:	8d 85       	ldd	r24, Y+13	; 0x0d
 64a:	9e 85       	ldd	r25, Y+14	; 0x0e
 64c:	68 1b       	sub	r22, r24
 64e:	79 0b       	sbc	r23, r25
 650:	78 87       	std	Y+8, r23	; 0x08
 652:	6f 83       	std	Y+7, r22	; 0x07
		GyroY -= gyroY_offset;
 654:	89 85       	ldd	r24, Y+9	; 0x09
 656:	9a 85       	ldd	r25, Y+10	; 0x0a
 658:	2f 85       	ldd	r18, Y+15	; 0x0f
 65a:	38 89       	ldd	r19, Y+16	; 0x10
 65c:	82 1b       	sub	r24, r18
 65e:	93 0b       	sbc	r25, r19
 660:	9a 87       	std	Y+10, r25	; 0x0a
 662:	89 87       	std	Y+9, r24	; 0x09
		GyroZ -= gyroZ_offset;
 664:	8b 85       	ldd	r24, Y+11	; 0x0b
 666:	9c 85       	ldd	r25, Y+12	; 0x0c
 668:	29 89       	ldd	r18, Y+17	; 0x11
 66a:	3a 89       	ldd	r19, Y+18	; 0x12
 66c:	82 1b       	sub	r24, r18
 66e:	93 0b       	sbc	r25, r19
 670:	9c 87       	std	Y+12, r25	; 0x0c
 672:	8b 87       	std	Y+11, r24	; 0x0b

		/* Calculate angle using complementary filter */
		angle = 0.98 * (angle + (GyroX / 131.0) * 0.01) + 0.02 * (atan2(AccelY, AccelZ) * 180 / M_PI);
 674:	07 2e       	mov	r0, r23
 676:	00 0c       	add	r0, r0
 678:	88 0b       	sbc	r24, r24
 67a:	99 0b       	sbc	r25, r25
 67c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	43 e0       	ldi	r20, 0x03	; 3
 686:	53 e4       	ldi	r21, 0x43	; 67
 688:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__divsf3>
 68c:	2a e0       	ldi	r18, 0x0A	; 10
 68e:	37 ed       	ldi	r19, 0xD7	; 215
 690:	43 e2       	ldi	r20, 0x23	; 35
 692:	5c e3       	ldi	r21, 0x3C	; 60
 694:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 698:	9b 01       	movw	r18, r22
 69a:	ac 01       	movw	r20, r24
 69c:	c5 01       	movw	r24, r10
 69e:	b4 01       	movw	r22, r8
 6a0:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__addsf3>
 6a4:	28 e4       	ldi	r18, 0x48	; 72
 6a6:	31 ee       	ldi	r19, 0xE1	; 225
 6a8:	4a e7       	ldi	r20, 0x7A	; 122
 6aa:	5f e3       	ldi	r21, 0x3F	; 63
 6ac:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 6b0:	6b 01       	movw	r12, r22
 6b2:	7c 01       	movw	r14, r24
 6b4:	6d 81       	ldd	r22, Y+5	; 0x05
 6b6:	7e 81       	ldd	r23, Y+6	; 0x06
 6b8:	07 2e       	mov	r0, r23
 6ba:	00 0c       	add	r0, r0
 6bc:	88 0b       	sbc	r24, r24
 6be:	99 0b       	sbc	r25, r25
 6c0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 6c4:	4b 01       	movw	r8, r22
 6c6:	5c 01       	movw	r10, r24
 6c8:	6b 81       	ldd	r22, Y+3	; 0x03
 6ca:	7c 81       	ldd	r23, Y+4	; 0x04
 6cc:	07 2e       	mov	r0, r23
 6ce:	00 0c       	add	r0, r0
 6d0:	88 0b       	sbc	r24, r24
 6d2:	99 0b       	sbc	r25, r25
 6d4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__floatsisf>
 6d8:	a5 01       	movw	r20, r10
 6da:	94 01       	movw	r18, r8
 6dc:	0e 94 77 04 	call	0x8ee	; 0x8ee <atan2>
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	44 e3       	ldi	r20, 0x34	; 52
 6e6:	53 e4       	ldi	r21, 0x43	; 67
 6e8:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 6ec:	2b ed       	ldi	r18, 0xDB	; 219
 6ee:	3f e0       	ldi	r19, 0x0F	; 15
 6f0:	49 e4       	ldi	r20, 0x49	; 73
 6f2:	50 e4       	ldi	r21, 0x40	; 64
 6f4:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__divsf3>
 6f8:	2a e0       	ldi	r18, 0x0A	; 10
 6fa:	37 ed       	ldi	r19, 0xD7	; 215
 6fc:	43 ea       	ldi	r20, 0xA3	; 163
 6fe:	5c e3       	ldi	r21, 0x3C	; 60
 700:	0e 94 39 06 	call	0xc72	; 0xc72 <__mulsf3>
 704:	9b 01       	movw	r18, r22
 706:	ac 01       	movw	r20, r24
 708:	c7 01       	movw	r24, r14
 70a:	b6 01       	movw	r22, r12
 70c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__addsf3>
 710:	4b 01       	movw	r8, r22
 712:	5c 01       	movw	r10, r24

		/* Calculate PID output */
		float pid_output = PID_Controller(setpoint, angle, &previous_error, &integral);
 714:	0f 2e       	mov	r0, r31
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	ef 2e       	mov	r14, r31
 71a:	f1 e0       	ldi	r31, 0x01	; 1
 71c:	ff 2e       	mov	r15, r31
 71e:	f0 2d       	mov	r31, r0
 720:	04 e0       	ldi	r16, 0x04	; 4
 722:	11 e0       	ldi	r17, 0x01	; 1
 724:	9b 01       	movw	r18, r22
 726:	ac 01       	movw	r20, r24
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	cb 01       	movw	r24, r22
 72e:	0e 94 75 02 	call	0x4ea	; 0x4ea <PID_Controller>
 732:	6b 01       	movw	r12, r22
 734:	7c 01       	movw	r14, r24

		/* Adjust motor speed based on PID output */
		if(pid_output > 0)
 736:	20 e0       	ldi	r18, 0x00	; 0
 738:	30 e0       	ldi	r19, 0x00	; 0
 73a:	a9 01       	movw	r20, r18
 73c:	0e 94 2c 06 	call	0xc58	; 0xc58 <__gesf2>
 740:	18 16       	cp	r1, r24
 742:	6c f4       	brge	.+26     	; 0x75e <main+0x19e>
		{
			Motor_SetDirection(true);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Motor_SetDirection>
			left_pwm_value = 200 + (uint8_t)pid_output;
 74a:	c7 01       	movw	r24, r14
 74c:	b6 01       	movw	r22, r12
 74e:	0e 94 48 05 	call	0xa90	; 0xa90 <__fixunssfsi>
 752:	88 ec       	ldi	r24, 0xC8	; 200
 754:	86 0f       	add	r24, r22
			right_pwm_value = 200 - (uint8_t)pid_output;
 756:	98 ec       	ldi	r25, 0xC8	; 200
 758:	96 1b       	sub	r25, r22
 75a:	69 2f       	mov	r22, r25
 75c:	0b c0       	rjmp	.+22     	; 0x774 <main+0x1b4>
		}
		else
		{
			Motor_SetDirection(true);
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	0e 94 59 02 	call	0x4b2	; 0x4b2 <Motor_SetDirection>
			left_pwm_value = 200 - (uint8_t)(-pid_output);
 764:	c7 01       	movw	r24, r14
 766:	b6 01       	movw	r22, r12
 768:	90 58       	subi	r25, 0x80	; 128
 76a:	0e 94 48 05 	call	0xa90	; 0xa90 <__fixunssfsi>
 76e:	88 ec       	ldi	r24, 0xC8	; 200
 770:	86 1b       	sub	r24, r22
			right_pwm_value = 200 + (uint8_t)(-pid_output);
 772:	68 53       	subi	r22, 0x38	; 56
		}

		Motor_SetSpeed(left_pwm_value, right_pwm_value);
 774:	0e 94 55 02 	call	0x4aa	; 0x4aa <Motor_SetSpeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 778:	8f e3       	ldi	r24, 0x3F	; 63
 77a:	9c e9       	ldi	r25, 0x9C	; 156
 77c:	01 97       	sbiw	r24, 0x01	; 1
 77e:	f1 f7       	brne	.-4      	; 0x77c <main+0x1bc>
 780:	00 c0       	rjmp	.+0      	; 0x782 <main+0x1c2>
 782:	00 00       	nop
 784:	4d cf       	rjmp	.-358    	; 0x620 <main+0x60>

00000786 <USART_Init>:

#include "USART_RS232_H_file.h"						/* Include USART header file */

void USART_Init(unsigned long BAUDRATE)				/* USART initialize function */
{ 
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);				/* Enable USART transmitter and receiver */
 786:	e1 ec       	ldi	r30, 0xC1	; 193
 788:	f0 e0       	ldi	r31, 0x00	; 0
 78a:	20 81       	ld	r18, Z
 78c:	28 61       	ori	r18, 0x18	; 24
 78e:	20 83       	st	Z, r18
	UCSR0C |= (1<<USBS0)|(3<<UCSZ00);	/* Write USCRC for 8 bit data and 1 stop bit */ 
 790:	e2 ec       	ldi	r30, 0xC2	; 194
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	20 81       	ld	r18, Z
 796:	2e 60       	ori	r18, 0x0E	; 14
 798:	20 83       	st	Z, r18
	UBRR0L = BAUD_PRESCALE;							/* Load UBRRL with lower 8 bit of prescale value */
 79a:	dc 01       	movw	r26, r24
 79c:	cb 01       	movw	r24, r22
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	aa 1f       	adc	r26, r26
 7a4:	bb 1f       	adc	r27, r27
 7a6:	88 0f       	add	r24, r24
 7a8:	99 1f       	adc	r25, r25
 7aa:	aa 1f       	adc	r26, r26
 7ac:	bb 1f       	adc	r27, r27
 7ae:	9c 01       	movw	r18, r24
 7b0:	ad 01       	movw	r20, r26
 7b2:	22 0f       	add	r18, r18
 7b4:	33 1f       	adc	r19, r19
 7b6:	44 1f       	adc	r20, r20
 7b8:	55 1f       	adc	r21, r21
 7ba:	22 0f       	add	r18, r18
 7bc:	33 1f       	adc	r19, r19
 7be:	44 1f       	adc	r20, r20
 7c0:	55 1f       	adc	r21, r21
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	74 e2       	ldi	r23, 0x24	; 36
 7c6:	84 ef       	ldi	r24, 0xF4	; 244
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__udivmodsi4>
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	82 0f       	add	r24, r18
 7d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UBRR0H = (BAUD_PRESCALE >> 8);					/* Load UBRRH with upper 8 bit of prescale value */
 7d6:	da 01       	movw	r26, r20
 7d8:	c9 01       	movw	r24, r18
 7da:	01 97       	sbiw	r24, 0x01	; 1
 7dc:	a1 09       	sbc	r26, r1
 7de:	b1 09       	sbc	r27, r1
 7e0:	89 2f       	mov	r24, r25
 7e2:	9a 2f       	mov	r25, r26
 7e4:	ab 2f       	mov	r26, r27
 7e6:	bb 27       	eor	r27, r27
 7e8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 7ec:	08 95       	ret

000007ee <__subsf3>:
 7ee:	50 58       	subi	r21, 0x80	; 128

000007f0 <__addsf3>:
 7f0:	bb 27       	eor	r27, r27
 7f2:	aa 27       	eor	r26, r26
 7f4:	0e 94 0f 04 	call	0x81e	; 0x81e <__addsf3x>
 7f8:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_round>
 7fc:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fp_pscA>
 800:	38 f0       	brcs	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 802:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscB>
 806:	20 f0       	brcs	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 808:	39 f4       	brne	.+14     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 80a:	9f 3f       	cpi	r25, 0xFF	; 255
 80c:	19 f4       	brne	.+6      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 80e:	26 f4       	brtc	.+8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 810:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_nan>
 814:	0e f4       	brtc	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 816:	e0 95       	com	r30
 818:	e7 fb       	bst	r30, 7
 81a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>

0000081e <__addsf3x>:
 81e:	e9 2f       	mov	r30, r25
 820:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_split3>
 824:	58 f3       	brcs	.-42     	; 0x7fc <__addsf3+0xc>
 826:	ba 17       	cp	r27, r26
 828:	62 07       	cpc	r22, r18
 82a:	73 07       	cpc	r23, r19
 82c:	84 07       	cpc	r24, r20
 82e:	95 07       	cpc	r25, r21
 830:	20 f0       	brcs	.+8      	; 0x83a <__addsf3x+0x1c>
 832:	79 f4       	brne	.+30     	; 0x852 <__addsf3x+0x34>
 834:	a6 f5       	brtc	.+104    	; 0x89e <__addsf3x+0x80>
 836:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_zero>
 83a:	0e f4       	brtc	.+2      	; 0x83e <__addsf3x+0x20>
 83c:	e0 95       	com	r30
 83e:	0b 2e       	mov	r0, r27
 840:	ba 2f       	mov	r27, r26
 842:	a0 2d       	mov	r26, r0
 844:	0b 01       	movw	r0, r22
 846:	b9 01       	movw	r22, r18
 848:	90 01       	movw	r18, r0
 84a:	0c 01       	movw	r0, r24
 84c:	ca 01       	movw	r24, r20
 84e:	a0 01       	movw	r20, r0
 850:	11 24       	eor	r1, r1
 852:	ff 27       	eor	r31, r31
 854:	59 1b       	sub	r21, r25
 856:	99 f0       	breq	.+38     	; 0x87e <__addsf3x+0x60>
 858:	59 3f       	cpi	r21, 0xF9	; 249
 85a:	50 f4       	brcc	.+20     	; 0x870 <__addsf3x+0x52>
 85c:	50 3e       	cpi	r21, 0xE0	; 224
 85e:	68 f1       	brcs	.+90     	; 0x8ba <__addsf3x+0x9c>
 860:	1a 16       	cp	r1, r26
 862:	f0 40       	sbci	r31, 0x00	; 0
 864:	a2 2f       	mov	r26, r18
 866:	23 2f       	mov	r18, r19
 868:	34 2f       	mov	r19, r20
 86a:	44 27       	eor	r20, r20
 86c:	58 5f       	subi	r21, 0xF8	; 248
 86e:	f3 cf       	rjmp	.-26     	; 0x856 <__addsf3x+0x38>
 870:	46 95       	lsr	r20
 872:	37 95       	ror	r19
 874:	27 95       	ror	r18
 876:	a7 95       	ror	r26
 878:	f0 40       	sbci	r31, 0x00	; 0
 87a:	53 95       	inc	r21
 87c:	c9 f7       	brne	.-14     	; 0x870 <__addsf3x+0x52>
 87e:	7e f4       	brtc	.+30     	; 0x89e <__addsf3x+0x80>
 880:	1f 16       	cp	r1, r31
 882:	ba 0b       	sbc	r27, r26
 884:	62 0b       	sbc	r22, r18
 886:	73 0b       	sbc	r23, r19
 888:	84 0b       	sbc	r24, r20
 88a:	ba f0       	brmi	.+46     	; 0x8ba <__addsf3x+0x9c>
 88c:	91 50       	subi	r25, 0x01	; 1
 88e:	a1 f0       	breq	.+40     	; 0x8b8 <__addsf3x+0x9a>
 890:	ff 0f       	add	r31, r31
 892:	bb 1f       	adc	r27, r27
 894:	66 1f       	adc	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	c2 f7       	brpl	.-16     	; 0x88c <__addsf3x+0x6e>
 89c:	0e c0       	rjmp	.+28     	; 0x8ba <__addsf3x+0x9c>
 89e:	ba 0f       	add	r27, r26
 8a0:	62 1f       	adc	r22, r18
 8a2:	73 1f       	adc	r23, r19
 8a4:	84 1f       	adc	r24, r20
 8a6:	48 f4       	brcc	.+18     	; 0x8ba <__addsf3x+0x9c>
 8a8:	87 95       	ror	r24
 8aa:	77 95       	ror	r23
 8ac:	67 95       	ror	r22
 8ae:	b7 95       	ror	r27
 8b0:	f7 95       	ror	r31
 8b2:	9e 3f       	cpi	r25, 0xFE	; 254
 8b4:	08 f0       	brcs	.+2      	; 0x8b8 <__addsf3x+0x9a>
 8b6:	b0 cf       	rjmp	.-160    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 8b8:	93 95       	inc	r25
 8ba:	88 0f       	add	r24, r24
 8bc:	08 f0       	brcs	.+2      	; 0x8c0 <__addsf3x+0xa2>
 8be:	99 27       	eor	r25, r25
 8c0:	ee 0f       	add	r30, r30
 8c2:	97 95       	ror	r25
 8c4:	87 95       	ror	r24
 8c6:	08 95       	ret
 8c8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fp_pscA>
 8cc:	60 f0       	brcs	.+24     	; 0x8e6 <__addsf3x+0xc8>
 8ce:	80 e8       	ldi	r24, 0x80	; 128
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	09 f4       	brne	.+2      	; 0x8d6 <__addsf3x+0xb8>
 8d4:	9e ef       	ldi	r25, 0xFE	; 254
 8d6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscB>
 8da:	28 f0       	brcs	.+10     	; 0x8e6 <__addsf3x+0xc8>
 8dc:	40 e8       	ldi	r20, 0x80	; 128
 8de:	51 e0       	ldi	r21, 0x01	; 1
 8e0:	71 f4       	brne	.+28     	; 0x8fe <atan2+0x10>
 8e2:	5e ef       	ldi	r21, 0xFE	; 254
 8e4:	0c c0       	rjmp	.+24     	; 0x8fe <atan2+0x10>
 8e6:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_nan>
 8ea:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_zero>

000008ee <atan2>:
 8ee:	e9 2f       	mov	r30, r25
 8f0:	e0 78       	andi	r30, 0x80	; 128
 8f2:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_split3>
 8f6:	40 f3       	brcs	.-48     	; 0x8c8 <__addsf3x+0xaa>
 8f8:	09 2e       	mov	r0, r25
 8fa:	05 2a       	or	r0, r21
 8fc:	b1 f3       	breq	.-20     	; 0x8ea <__addsf3x+0xcc>
 8fe:	26 17       	cp	r18, r22
 900:	37 07       	cpc	r19, r23
 902:	48 07       	cpc	r20, r24
 904:	59 07       	cpc	r21, r25
 906:	38 f0       	brcs	.+14     	; 0x916 <__stack+0x17>
 908:	0e 2e       	mov	r0, r30
 90a:	07 f8       	bld	r0, 7
 90c:	e0 25       	eor	r30, r0
 90e:	69 f0       	breq	.+26     	; 0x92a <__stack+0x2b>
 910:	e0 25       	eor	r30, r0
 912:	e0 64       	ori	r30, 0x40	; 64
 914:	0a c0       	rjmp	.+20     	; 0x92a <__stack+0x2b>
 916:	ef 63       	ori	r30, 0x3F	; 63
 918:	07 f8       	bld	r0, 7
 91a:	00 94       	com	r0
 91c:	07 fa       	bst	r0, 7
 91e:	db 01       	movw	r26, r22
 920:	b9 01       	movw	r22, r18
 922:	9d 01       	movw	r18, r26
 924:	dc 01       	movw	r26, r24
 926:	ca 01       	movw	r24, r20
 928:	ad 01       	movw	r20, r26
 92a:	ef 93       	push	r30
 92c:	0e 94 ed 04 	call	0x9da	; 0x9da <__divsf3_pse>
 930:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_round>
 934:	0e 94 a7 04 	call	0x94e	; 0x94e <atan>
 938:	5f 91       	pop	r21
 93a:	55 23       	and	r21, r21
 93c:	39 f0       	breq	.+14     	; 0x94c <__stack+0x4d>
 93e:	2b ed       	ldi	r18, 0xDB	; 219
 940:	3f e0       	ldi	r19, 0x0F	; 15
 942:	49 e4       	ldi	r20, 0x49	; 73
 944:	50 fd       	sbrc	r21, 0
 946:	49 ec       	ldi	r20, 0xC9	; 201
 948:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <__addsf3>
 94c:	08 95       	ret

0000094e <atan>:
 94e:	df 93       	push	r29
 950:	dd 27       	eor	r29, r29
 952:	b9 2f       	mov	r27, r25
 954:	bf 77       	andi	r27, 0x7F	; 127
 956:	40 e8       	ldi	r20, 0x80	; 128
 958:	5f e3       	ldi	r21, 0x3F	; 63
 95a:	16 16       	cp	r1, r22
 95c:	17 06       	cpc	r1, r23
 95e:	48 07       	cpc	r20, r24
 960:	5b 07       	cpc	r21, r27
 962:	18 f4       	brcc	.+6      	; 0x96a <atan+0x1c>
 964:	d9 2f       	mov	r29, r25
 966:	0e 94 31 06 	call	0xc62	; 0xc62 <inverse>
 96a:	9f 93       	push	r25
 96c:	8f 93       	push	r24
 96e:	7f 93       	push	r23
 970:	6f 93       	push	r22
 972:	0e 94 a6 06 	call	0xd4c	; 0xd4c <square>
 976:	e8 e6       	ldi	r30, 0x68	; 104
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__fp_powser>
 97e:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__fp_round>
 982:	2f 91       	pop	r18
 984:	3f 91       	pop	r19
 986:	4f 91       	pop	r20
 988:	5f 91       	pop	r21
 98a:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulsf3x>
 98e:	dd 23       	and	r29, r29
 990:	51 f0       	breq	.+20     	; 0x9a6 <atan+0x58>
 992:	90 58       	subi	r25, 0x80	; 128
 994:	a2 ea       	ldi	r26, 0xA2	; 162
 996:	2a ed       	ldi	r18, 0xDA	; 218
 998:	3f e0       	ldi	r19, 0x0F	; 15
 99a:	49 ec       	ldi	r20, 0xC9	; 201
 99c:	5f e3       	ldi	r21, 0x3F	; 63
 99e:	d0 78       	andi	r29, 0x80	; 128
 9a0:	5d 27       	eor	r21, r29
 9a2:	0e 94 0f 04 	call	0x81e	; 0x81e <__addsf3x>
 9a6:	df 91       	pop	r29
 9a8:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_round>

000009ac <__divsf3>:
 9ac:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__divsf3x>
 9b0:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_round>
 9b4:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscB>
 9b8:	58 f0       	brcs	.+22     	; 0x9d0 <__divsf3+0x24>
 9ba:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fp_pscA>
 9be:	40 f0       	brcs	.+16     	; 0x9d0 <__divsf3+0x24>
 9c0:	29 f4       	brne	.+10     	; 0x9cc <__divsf3+0x20>
 9c2:	5f 3f       	cpi	r21, 0xFF	; 255
 9c4:	29 f0       	breq	.+10     	; 0x9d0 <__divsf3+0x24>
 9c6:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 9ca:	51 11       	cpse	r21, r1
 9cc:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_szero>
 9d0:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_nan>

000009d4 <__divsf3x>:
 9d4:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_split3>
 9d8:	68 f3       	brcs	.-38     	; 0x9b4 <__divsf3+0x8>

000009da <__divsf3_pse>:
 9da:	99 23       	and	r25, r25
 9dc:	b1 f3       	breq	.-20     	; 0x9ca <__divsf3+0x1e>
 9de:	55 23       	and	r21, r21
 9e0:	91 f3       	breq	.-28     	; 0x9c6 <__divsf3+0x1a>
 9e2:	95 1b       	sub	r25, r21
 9e4:	55 0b       	sbc	r21, r21
 9e6:	bb 27       	eor	r27, r27
 9e8:	aa 27       	eor	r26, r26
 9ea:	62 17       	cp	r22, r18
 9ec:	73 07       	cpc	r23, r19
 9ee:	84 07       	cpc	r24, r20
 9f0:	38 f0       	brcs	.+14     	; 0xa00 <__divsf3_pse+0x26>
 9f2:	9f 5f       	subi	r25, 0xFF	; 255
 9f4:	5f 4f       	sbci	r21, 0xFF	; 255
 9f6:	22 0f       	add	r18, r18
 9f8:	33 1f       	adc	r19, r19
 9fa:	44 1f       	adc	r20, r20
 9fc:	aa 1f       	adc	r26, r26
 9fe:	a9 f3       	breq	.-22     	; 0x9ea <__divsf3_pse+0x10>
 a00:	35 d0       	rcall	.+106    	; 0xa6c <__divsf3_pse+0x92>
 a02:	0e 2e       	mov	r0, r30
 a04:	3a f0       	brmi	.+14     	; 0xa14 <__divsf3_pse+0x3a>
 a06:	e0 e8       	ldi	r30, 0x80	; 128
 a08:	32 d0       	rcall	.+100    	; 0xa6e <__divsf3_pse+0x94>
 a0a:	91 50       	subi	r25, 0x01	; 1
 a0c:	50 40       	sbci	r21, 0x00	; 0
 a0e:	e6 95       	lsr	r30
 a10:	00 1c       	adc	r0, r0
 a12:	ca f7       	brpl	.-14     	; 0xa06 <__divsf3_pse+0x2c>
 a14:	2b d0       	rcall	.+86     	; 0xa6c <__divsf3_pse+0x92>
 a16:	fe 2f       	mov	r31, r30
 a18:	29 d0       	rcall	.+82     	; 0xa6c <__divsf3_pse+0x92>
 a1a:	66 0f       	add	r22, r22
 a1c:	77 1f       	adc	r23, r23
 a1e:	88 1f       	adc	r24, r24
 a20:	bb 1f       	adc	r27, r27
 a22:	26 17       	cp	r18, r22
 a24:	37 07       	cpc	r19, r23
 a26:	48 07       	cpc	r20, r24
 a28:	ab 07       	cpc	r26, r27
 a2a:	b0 e8       	ldi	r27, 0x80	; 128
 a2c:	09 f0       	breq	.+2      	; 0xa30 <__divsf3_pse+0x56>
 a2e:	bb 0b       	sbc	r27, r27
 a30:	80 2d       	mov	r24, r0
 a32:	bf 01       	movw	r22, r30
 a34:	ff 27       	eor	r31, r31
 a36:	93 58       	subi	r25, 0x83	; 131
 a38:	5f 4f       	sbci	r21, 0xFF	; 255
 a3a:	3a f0       	brmi	.+14     	; 0xa4a <__divsf3_pse+0x70>
 a3c:	9e 3f       	cpi	r25, 0xFE	; 254
 a3e:	51 05       	cpc	r21, r1
 a40:	78 f0       	brcs	.+30     	; 0xa60 <__divsf3_pse+0x86>
 a42:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 a46:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_szero>
 a4a:	5f 3f       	cpi	r21, 0xFF	; 255
 a4c:	e4 f3       	brlt	.-8      	; 0xa46 <__divsf3_pse+0x6c>
 a4e:	98 3e       	cpi	r25, 0xE8	; 232
 a50:	d4 f3       	brlt	.-12     	; 0xa46 <__divsf3_pse+0x6c>
 a52:	86 95       	lsr	r24
 a54:	77 95       	ror	r23
 a56:	67 95       	ror	r22
 a58:	b7 95       	ror	r27
 a5a:	f7 95       	ror	r31
 a5c:	9f 5f       	subi	r25, 0xFF	; 255
 a5e:	c9 f7       	brne	.-14     	; 0xa52 <__divsf3_pse+0x78>
 a60:	88 0f       	add	r24, r24
 a62:	91 1d       	adc	r25, r1
 a64:	96 95       	lsr	r25
 a66:	87 95       	ror	r24
 a68:	97 f9       	bld	r25, 7
 a6a:	08 95       	ret
 a6c:	e1 e0       	ldi	r30, 0x01	; 1
 a6e:	66 0f       	add	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	bb 1f       	adc	r27, r27
 a76:	62 17       	cp	r22, r18
 a78:	73 07       	cpc	r23, r19
 a7a:	84 07       	cpc	r24, r20
 a7c:	ba 07       	cpc	r27, r26
 a7e:	20 f0       	brcs	.+8      	; 0xa88 <__divsf3_pse+0xae>
 a80:	62 1b       	sub	r22, r18
 a82:	73 0b       	sbc	r23, r19
 a84:	84 0b       	sbc	r24, r20
 a86:	ba 0b       	sbc	r27, r26
 a88:	ee 1f       	adc	r30, r30
 a8a:	88 f7       	brcc	.-30     	; 0xa6e <__divsf3_pse+0x94>
 a8c:	e0 95       	com	r30
 a8e:	08 95       	ret

00000a90 <__fixunssfsi>:
 a90:	0e 94 0b 06 	call	0xc16	; 0xc16 <__fp_splitA>
 a94:	88 f0       	brcs	.+34     	; 0xab8 <__fixunssfsi+0x28>
 a96:	9f 57       	subi	r25, 0x7F	; 127
 a98:	98 f0       	brcs	.+38     	; 0xac0 <__fixunssfsi+0x30>
 a9a:	b9 2f       	mov	r27, r25
 a9c:	99 27       	eor	r25, r25
 a9e:	b7 51       	subi	r27, 0x17	; 23
 aa0:	b0 f0       	brcs	.+44     	; 0xace <__fixunssfsi+0x3e>
 aa2:	e1 f0       	breq	.+56     	; 0xadc <__fixunssfsi+0x4c>
 aa4:	66 0f       	add	r22, r22
 aa6:	77 1f       	adc	r23, r23
 aa8:	88 1f       	adc	r24, r24
 aaa:	99 1f       	adc	r25, r25
 aac:	1a f0       	brmi	.+6      	; 0xab4 <__fixunssfsi+0x24>
 aae:	ba 95       	dec	r27
 ab0:	c9 f7       	brne	.-14     	; 0xaa4 <__fixunssfsi+0x14>
 ab2:	14 c0       	rjmp	.+40     	; 0xadc <__fixunssfsi+0x4c>
 ab4:	b1 30       	cpi	r27, 0x01	; 1
 ab6:	91 f0       	breq	.+36     	; 0xadc <__fixunssfsi+0x4c>
 ab8:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fp_zero>
 abc:	b1 e0       	ldi	r27, 0x01	; 1
 abe:	08 95       	ret
 ac0:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__fp_zero>
 ac4:	67 2f       	mov	r22, r23
 ac6:	78 2f       	mov	r23, r24
 ac8:	88 27       	eor	r24, r24
 aca:	b8 5f       	subi	r27, 0xF8	; 248
 acc:	39 f0       	breq	.+14     	; 0xadc <__fixunssfsi+0x4c>
 ace:	b9 3f       	cpi	r27, 0xF9	; 249
 ad0:	cc f3       	brlt	.-14     	; 0xac4 <__fixunssfsi+0x34>
 ad2:	86 95       	lsr	r24
 ad4:	77 95       	ror	r23
 ad6:	67 95       	ror	r22
 ad8:	b3 95       	inc	r27
 ada:	d9 f7       	brne	.-10     	; 0xad2 <__fixunssfsi+0x42>
 adc:	3e f4       	brtc	.+14     	; 0xaec <__fixunssfsi+0x5c>
 ade:	90 95       	com	r25
 ae0:	80 95       	com	r24
 ae2:	70 95       	com	r23
 ae4:	61 95       	neg	r22
 ae6:	7f 4f       	sbci	r23, 0xFF	; 255
 ae8:	8f 4f       	sbci	r24, 0xFF	; 255
 aea:	9f 4f       	sbci	r25, 0xFF	; 255
 aec:	08 95       	ret

00000aee <__floatunsisf>:
 aee:	e8 94       	clt
 af0:	09 c0       	rjmp	.+18     	; 0xb04 <__floatsisf+0x12>

00000af2 <__floatsisf>:
 af2:	97 fb       	bst	r25, 7
 af4:	3e f4       	brtc	.+14     	; 0xb04 <__floatsisf+0x12>
 af6:	90 95       	com	r25
 af8:	80 95       	com	r24
 afa:	70 95       	com	r23
 afc:	61 95       	neg	r22
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	99 23       	and	r25, r25
 b06:	a9 f0       	breq	.+42     	; 0xb32 <__floatsisf+0x40>
 b08:	f9 2f       	mov	r31, r25
 b0a:	96 e9       	ldi	r25, 0x96	; 150
 b0c:	bb 27       	eor	r27, r27
 b0e:	93 95       	inc	r25
 b10:	f6 95       	lsr	r31
 b12:	87 95       	ror	r24
 b14:	77 95       	ror	r23
 b16:	67 95       	ror	r22
 b18:	b7 95       	ror	r27
 b1a:	f1 11       	cpse	r31, r1
 b1c:	f8 cf       	rjmp	.-16     	; 0xb0e <__floatsisf+0x1c>
 b1e:	fa f4       	brpl	.+62     	; 0xb5e <__floatsisf+0x6c>
 b20:	bb 0f       	add	r27, r27
 b22:	11 f4       	brne	.+4      	; 0xb28 <__floatsisf+0x36>
 b24:	60 ff       	sbrs	r22, 0
 b26:	1b c0       	rjmp	.+54     	; 0xb5e <__floatsisf+0x6c>
 b28:	6f 5f       	subi	r22, 0xFF	; 255
 b2a:	7f 4f       	sbci	r23, 0xFF	; 255
 b2c:	8f 4f       	sbci	r24, 0xFF	; 255
 b2e:	9f 4f       	sbci	r25, 0xFF	; 255
 b30:	16 c0       	rjmp	.+44     	; 0xb5e <__floatsisf+0x6c>
 b32:	88 23       	and	r24, r24
 b34:	11 f0       	breq	.+4      	; 0xb3a <__floatsisf+0x48>
 b36:	96 e9       	ldi	r25, 0x96	; 150
 b38:	11 c0       	rjmp	.+34     	; 0xb5c <__floatsisf+0x6a>
 b3a:	77 23       	and	r23, r23
 b3c:	21 f0       	breq	.+8      	; 0xb46 <__floatsisf+0x54>
 b3e:	9e e8       	ldi	r25, 0x8E	; 142
 b40:	87 2f       	mov	r24, r23
 b42:	76 2f       	mov	r23, r22
 b44:	05 c0       	rjmp	.+10     	; 0xb50 <__floatsisf+0x5e>
 b46:	66 23       	and	r22, r22
 b48:	71 f0       	breq	.+28     	; 0xb66 <__floatsisf+0x74>
 b4a:	96 e8       	ldi	r25, 0x86	; 134
 b4c:	86 2f       	mov	r24, r22
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	60 e0       	ldi	r22, 0x00	; 0
 b52:	2a f0       	brmi	.+10     	; 0xb5e <__floatsisf+0x6c>
 b54:	9a 95       	dec	r25
 b56:	66 0f       	add	r22, r22
 b58:	77 1f       	adc	r23, r23
 b5a:	88 1f       	adc	r24, r24
 b5c:	da f7       	brpl	.-10     	; 0xb54 <__floatsisf+0x62>
 b5e:	88 0f       	add	r24, r24
 b60:	96 95       	lsr	r25
 b62:	87 95       	ror	r24
 b64:	97 f9       	bld	r25, 7
 b66:	08 95       	ret

00000b68 <__fp_inf>:
 b68:	97 f9       	bld	r25, 7
 b6a:	9f 67       	ori	r25, 0x7F	; 127
 b6c:	80 e8       	ldi	r24, 0x80	; 128
 b6e:	70 e0       	ldi	r23, 0x00	; 0
 b70:	60 e0       	ldi	r22, 0x00	; 0
 b72:	08 95       	ret

00000b74 <__fp_nan>:
 b74:	9f ef       	ldi	r25, 0xFF	; 255
 b76:	80 ec       	ldi	r24, 0xC0	; 192
 b78:	08 95       	ret

00000b7a <__fp_powser>:
 b7a:	df 93       	push	r29
 b7c:	cf 93       	push	r28
 b7e:	1f 93       	push	r17
 b80:	0f 93       	push	r16
 b82:	ff 92       	push	r15
 b84:	ef 92       	push	r14
 b86:	df 92       	push	r13
 b88:	7b 01       	movw	r14, r22
 b8a:	8c 01       	movw	r16, r24
 b8c:	68 94       	set
 b8e:	06 c0       	rjmp	.+12     	; 0xb9c <__fp_powser+0x22>
 b90:	da 2e       	mov	r13, r26
 b92:	ef 01       	movw	r28, r30
 b94:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulsf3x>
 b98:	fe 01       	movw	r30, r28
 b9a:	e8 94       	clt
 b9c:	a5 91       	lpm	r26, Z+
 b9e:	25 91       	lpm	r18, Z+
 ba0:	35 91       	lpm	r19, Z+
 ba2:	45 91       	lpm	r20, Z+
 ba4:	55 91       	lpm	r21, Z+
 ba6:	a6 f3       	brts	.-24     	; 0xb90 <__fp_powser+0x16>
 ba8:	ef 01       	movw	r28, r30
 baa:	0e 94 0f 04 	call	0x81e	; 0x81e <__addsf3x>
 bae:	fe 01       	movw	r30, r28
 bb0:	97 01       	movw	r18, r14
 bb2:	a8 01       	movw	r20, r16
 bb4:	da 94       	dec	r13
 bb6:	69 f7       	brne	.-38     	; 0xb92 <__fp_powser+0x18>
 bb8:	df 90       	pop	r13
 bba:	ef 90       	pop	r14
 bbc:	ff 90       	pop	r15
 bbe:	0f 91       	pop	r16
 bc0:	1f 91       	pop	r17
 bc2:	cf 91       	pop	r28
 bc4:	df 91       	pop	r29
 bc6:	08 95       	ret

00000bc8 <__fp_pscA>:
 bc8:	00 24       	eor	r0, r0
 bca:	0a 94       	dec	r0
 bcc:	16 16       	cp	r1, r22
 bce:	17 06       	cpc	r1, r23
 bd0:	18 06       	cpc	r1, r24
 bd2:	09 06       	cpc	r0, r25
 bd4:	08 95       	ret

00000bd6 <__fp_pscB>:
 bd6:	00 24       	eor	r0, r0
 bd8:	0a 94       	dec	r0
 bda:	12 16       	cp	r1, r18
 bdc:	13 06       	cpc	r1, r19
 bde:	14 06       	cpc	r1, r20
 be0:	05 06       	cpc	r0, r21
 be2:	08 95       	ret

00000be4 <__fp_round>:
 be4:	09 2e       	mov	r0, r25
 be6:	03 94       	inc	r0
 be8:	00 0c       	add	r0, r0
 bea:	11 f4       	brne	.+4      	; 0xbf0 <__fp_round+0xc>
 bec:	88 23       	and	r24, r24
 bee:	52 f0       	brmi	.+20     	; 0xc04 <__fp_round+0x20>
 bf0:	bb 0f       	add	r27, r27
 bf2:	40 f4       	brcc	.+16     	; 0xc04 <__fp_round+0x20>
 bf4:	bf 2b       	or	r27, r31
 bf6:	11 f4       	brne	.+4      	; 0xbfc <__fp_round+0x18>
 bf8:	60 ff       	sbrs	r22, 0
 bfa:	04 c0       	rjmp	.+8      	; 0xc04 <__fp_round+0x20>
 bfc:	6f 5f       	subi	r22, 0xFF	; 255
 bfe:	7f 4f       	sbci	r23, 0xFF	; 255
 c00:	8f 4f       	sbci	r24, 0xFF	; 255
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	08 95       	ret

00000c06 <__fp_split3>:
 c06:	57 fd       	sbrc	r21, 7
 c08:	90 58       	subi	r25, 0x80	; 128
 c0a:	44 0f       	add	r20, r20
 c0c:	55 1f       	adc	r21, r21
 c0e:	59 f0       	breq	.+22     	; 0xc26 <__fp_splitA+0x10>
 c10:	5f 3f       	cpi	r21, 0xFF	; 255
 c12:	71 f0       	breq	.+28     	; 0xc30 <__fp_splitA+0x1a>
 c14:	47 95       	ror	r20

00000c16 <__fp_splitA>:
 c16:	88 0f       	add	r24, r24
 c18:	97 fb       	bst	r25, 7
 c1a:	99 1f       	adc	r25, r25
 c1c:	61 f0       	breq	.+24     	; 0xc36 <__fp_splitA+0x20>
 c1e:	9f 3f       	cpi	r25, 0xFF	; 255
 c20:	79 f0       	breq	.+30     	; 0xc40 <__fp_splitA+0x2a>
 c22:	87 95       	ror	r24
 c24:	08 95       	ret
 c26:	12 16       	cp	r1, r18
 c28:	13 06       	cpc	r1, r19
 c2a:	14 06       	cpc	r1, r20
 c2c:	55 1f       	adc	r21, r21
 c2e:	f2 cf       	rjmp	.-28     	; 0xc14 <__fp_split3+0xe>
 c30:	46 95       	lsr	r20
 c32:	f1 df       	rcall	.-30     	; 0xc16 <__fp_splitA>
 c34:	08 c0       	rjmp	.+16     	; 0xc46 <__fp_splitA+0x30>
 c36:	16 16       	cp	r1, r22
 c38:	17 06       	cpc	r1, r23
 c3a:	18 06       	cpc	r1, r24
 c3c:	99 1f       	adc	r25, r25
 c3e:	f1 cf       	rjmp	.-30     	; 0xc22 <__fp_splitA+0xc>
 c40:	86 95       	lsr	r24
 c42:	71 05       	cpc	r23, r1
 c44:	61 05       	cpc	r22, r1
 c46:	08 94       	sec
 c48:	08 95       	ret

00000c4a <__fp_zero>:
 c4a:	e8 94       	clt

00000c4c <__fp_szero>:
 c4c:	bb 27       	eor	r27, r27
 c4e:	66 27       	eor	r22, r22
 c50:	77 27       	eor	r23, r23
 c52:	cb 01       	movw	r24, r22
 c54:	97 f9       	bld	r25, 7
 c56:	08 95       	ret

00000c58 <__gesf2>:
 c58:	0e 94 aa 06 	call	0xd54	; 0xd54 <__fp_cmp>
 c5c:	08 f4       	brcc	.+2      	; 0xc60 <__gesf2+0x8>
 c5e:	8f ef       	ldi	r24, 0xFF	; 255
 c60:	08 95       	ret

00000c62 <inverse>:
 c62:	9b 01       	movw	r18, r22
 c64:	ac 01       	movw	r20, r24
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	70 e0       	ldi	r23, 0x00	; 0
 c6a:	80 e8       	ldi	r24, 0x80	; 128
 c6c:	9f e3       	ldi	r25, 0x3F	; 63
 c6e:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__divsf3>

00000c72 <__mulsf3>:
 c72:	0e 94 4c 06 	call	0xc98	; 0xc98 <__mulsf3x>
 c76:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <__fp_round>
 c7a:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <__fp_pscA>
 c7e:	38 f0       	brcs	.+14     	; 0xc8e <__mulsf3+0x1c>
 c80:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__fp_pscB>
 c84:	20 f0       	brcs	.+8      	; 0xc8e <__mulsf3+0x1c>
 c86:	95 23       	and	r25, r21
 c88:	11 f0       	breq	.+4      	; 0xc8e <__mulsf3+0x1c>
 c8a:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 c8e:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__fp_nan>
 c92:	11 24       	eor	r1, r1
 c94:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_szero>

00000c98 <__mulsf3x>:
 c98:	0e 94 03 06 	call	0xc06	; 0xc06 <__fp_split3>
 c9c:	70 f3       	brcs	.-36     	; 0xc7a <__mulsf3+0x8>

00000c9e <__mulsf3_pse>:
 c9e:	95 9f       	mul	r25, r21
 ca0:	c1 f3       	breq	.-16     	; 0xc92 <__mulsf3+0x20>
 ca2:	95 0f       	add	r25, r21
 ca4:	50 e0       	ldi	r21, 0x00	; 0
 ca6:	55 1f       	adc	r21, r21
 ca8:	62 9f       	mul	r22, r18
 caa:	f0 01       	movw	r30, r0
 cac:	72 9f       	mul	r23, r18
 cae:	bb 27       	eor	r27, r27
 cb0:	f0 0d       	add	r31, r0
 cb2:	b1 1d       	adc	r27, r1
 cb4:	63 9f       	mul	r22, r19
 cb6:	aa 27       	eor	r26, r26
 cb8:	f0 0d       	add	r31, r0
 cba:	b1 1d       	adc	r27, r1
 cbc:	aa 1f       	adc	r26, r26
 cbe:	64 9f       	mul	r22, r20
 cc0:	66 27       	eor	r22, r22
 cc2:	b0 0d       	add	r27, r0
 cc4:	a1 1d       	adc	r26, r1
 cc6:	66 1f       	adc	r22, r22
 cc8:	82 9f       	mul	r24, r18
 cca:	22 27       	eor	r18, r18
 ccc:	b0 0d       	add	r27, r0
 cce:	a1 1d       	adc	r26, r1
 cd0:	62 1f       	adc	r22, r18
 cd2:	73 9f       	mul	r23, r19
 cd4:	b0 0d       	add	r27, r0
 cd6:	a1 1d       	adc	r26, r1
 cd8:	62 1f       	adc	r22, r18
 cda:	83 9f       	mul	r24, r19
 cdc:	a0 0d       	add	r26, r0
 cde:	61 1d       	adc	r22, r1
 ce0:	22 1f       	adc	r18, r18
 ce2:	74 9f       	mul	r23, r20
 ce4:	33 27       	eor	r19, r19
 ce6:	a0 0d       	add	r26, r0
 ce8:	61 1d       	adc	r22, r1
 cea:	23 1f       	adc	r18, r19
 cec:	84 9f       	mul	r24, r20
 cee:	60 0d       	add	r22, r0
 cf0:	21 1d       	adc	r18, r1
 cf2:	82 2f       	mov	r24, r18
 cf4:	76 2f       	mov	r23, r22
 cf6:	6a 2f       	mov	r22, r26
 cf8:	11 24       	eor	r1, r1
 cfa:	9f 57       	subi	r25, 0x7F	; 127
 cfc:	50 40       	sbci	r21, 0x00	; 0
 cfe:	9a f0       	brmi	.+38     	; 0xd26 <__mulsf3_pse+0x88>
 d00:	f1 f0       	breq	.+60     	; 0xd3e <__mulsf3_pse+0xa0>
 d02:	88 23       	and	r24, r24
 d04:	4a f0       	brmi	.+18     	; 0xd18 <__mulsf3_pse+0x7a>
 d06:	ee 0f       	add	r30, r30
 d08:	ff 1f       	adc	r31, r31
 d0a:	bb 1f       	adc	r27, r27
 d0c:	66 1f       	adc	r22, r22
 d0e:	77 1f       	adc	r23, r23
 d10:	88 1f       	adc	r24, r24
 d12:	91 50       	subi	r25, 0x01	; 1
 d14:	50 40       	sbci	r21, 0x00	; 0
 d16:	a9 f7       	brne	.-22     	; 0xd02 <__mulsf3_pse+0x64>
 d18:	9e 3f       	cpi	r25, 0xFE	; 254
 d1a:	51 05       	cpc	r21, r1
 d1c:	80 f0       	brcs	.+32     	; 0xd3e <__mulsf3_pse+0xa0>
 d1e:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_inf>
 d22:	0c 94 26 06 	jmp	0xc4c	; 0xc4c <__fp_szero>
 d26:	5f 3f       	cpi	r21, 0xFF	; 255
 d28:	e4 f3       	brlt	.-8      	; 0xd22 <__mulsf3_pse+0x84>
 d2a:	98 3e       	cpi	r25, 0xE8	; 232
 d2c:	d4 f3       	brlt	.-12     	; 0xd22 <__mulsf3_pse+0x84>
 d2e:	86 95       	lsr	r24
 d30:	77 95       	ror	r23
 d32:	67 95       	ror	r22
 d34:	b7 95       	ror	r27
 d36:	f7 95       	ror	r31
 d38:	e7 95       	ror	r30
 d3a:	9f 5f       	subi	r25, 0xFF	; 255
 d3c:	c1 f7       	brne	.-16     	; 0xd2e <__mulsf3_pse+0x90>
 d3e:	fe 2b       	or	r31, r30
 d40:	88 0f       	add	r24, r24
 d42:	91 1d       	adc	r25, r1
 d44:	96 95       	lsr	r25
 d46:	87 95       	ror	r24
 d48:	97 f9       	bld	r25, 7
 d4a:	08 95       	ret

00000d4c <square>:
 d4c:	9b 01       	movw	r18, r22
 d4e:	ac 01       	movw	r20, r24
 d50:	0c 94 39 06 	jmp	0xc72	; 0xc72 <__mulsf3>

00000d54 <__fp_cmp>:
 d54:	99 0f       	add	r25, r25
 d56:	00 08       	sbc	r0, r0
 d58:	55 0f       	add	r21, r21
 d5a:	aa 0b       	sbc	r26, r26
 d5c:	e0 e8       	ldi	r30, 0x80	; 128
 d5e:	fe ef       	ldi	r31, 0xFE	; 254
 d60:	16 16       	cp	r1, r22
 d62:	17 06       	cpc	r1, r23
 d64:	e8 07       	cpc	r30, r24
 d66:	f9 07       	cpc	r31, r25
 d68:	c0 f0       	brcs	.+48     	; 0xd9a <__fp_cmp+0x46>
 d6a:	12 16       	cp	r1, r18
 d6c:	13 06       	cpc	r1, r19
 d6e:	e4 07       	cpc	r30, r20
 d70:	f5 07       	cpc	r31, r21
 d72:	98 f0       	brcs	.+38     	; 0xd9a <__fp_cmp+0x46>
 d74:	62 1b       	sub	r22, r18
 d76:	73 0b       	sbc	r23, r19
 d78:	84 0b       	sbc	r24, r20
 d7a:	95 0b       	sbc	r25, r21
 d7c:	39 f4       	brne	.+14     	; 0xd8c <__fp_cmp+0x38>
 d7e:	0a 26       	eor	r0, r26
 d80:	61 f0       	breq	.+24     	; 0xd9a <__fp_cmp+0x46>
 d82:	23 2b       	or	r18, r19
 d84:	24 2b       	or	r18, r20
 d86:	25 2b       	or	r18, r21
 d88:	21 f4       	brne	.+8      	; 0xd92 <__fp_cmp+0x3e>
 d8a:	08 95       	ret
 d8c:	0a 26       	eor	r0, r26
 d8e:	09 f4       	brne	.+2      	; 0xd92 <__fp_cmp+0x3e>
 d90:	a1 40       	sbci	r26, 0x01	; 1
 d92:	a6 95       	lsr	r26
 d94:	8f ef       	ldi	r24, 0xFF	; 255
 d96:	81 1d       	adc	r24, r1
 d98:	81 1d       	adc	r24, r1
 d9a:	08 95       	ret

00000d9c <__udivmodsi4>:
 d9c:	a1 e2       	ldi	r26, 0x21	; 33
 d9e:	1a 2e       	mov	r1, r26
 da0:	aa 1b       	sub	r26, r26
 da2:	bb 1b       	sub	r27, r27
 da4:	fd 01       	movw	r30, r26
 da6:	0d c0       	rjmp	.+26     	; 0xdc2 <__udivmodsi4_ep>

00000da8 <__udivmodsi4_loop>:
 da8:	aa 1f       	adc	r26, r26
 daa:	bb 1f       	adc	r27, r27
 dac:	ee 1f       	adc	r30, r30
 dae:	ff 1f       	adc	r31, r31
 db0:	a2 17       	cp	r26, r18
 db2:	b3 07       	cpc	r27, r19
 db4:	e4 07       	cpc	r30, r20
 db6:	f5 07       	cpc	r31, r21
 db8:	20 f0       	brcs	.+8      	; 0xdc2 <__udivmodsi4_ep>
 dba:	a2 1b       	sub	r26, r18
 dbc:	b3 0b       	sbc	r27, r19
 dbe:	e4 0b       	sbc	r30, r20
 dc0:	f5 0b       	sbc	r31, r21

00000dc2 <__udivmodsi4_ep>:
 dc2:	66 1f       	adc	r22, r22
 dc4:	77 1f       	adc	r23, r23
 dc6:	88 1f       	adc	r24, r24
 dc8:	99 1f       	adc	r25, r25
 dca:	1a 94       	dec	r1
 dcc:	69 f7       	brne	.-38     	; 0xda8 <__udivmodsi4_loop>
 dce:	60 95       	com	r22
 dd0:	70 95       	com	r23
 dd2:	80 95       	com	r24
 dd4:	90 95       	com	r25
 dd6:	9b 01       	movw	r18, r22
 dd8:	ac 01       	movw	r20, r24
 dda:	bd 01       	movw	r22, r26
 ddc:	cf 01       	movw	r24, r30
 dde:	08 95       	ret

00000de0 <__divmodsi4>:
 de0:	05 2e       	mov	r0, r21
 de2:	97 fb       	bst	r25, 7
 de4:	1e f4       	brtc	.+6      	; 0xdec <__divmodsi4+0xc>
 de6:	00 94       	com	r0
 de8:	0e 94 07 07 	call	0xe0e	; 0xe0e <__negsi2>
 dec:	57 fd       	sbrc	r21, 7
 dee:	07 d0       	rcall	.+14     	; 0xdfe <__divmodsi4_neg2>
 df0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <__udivmodsi4>
 df4:	07 fc       	sbrc	r0, 7
 df6:	03 d0       	rcall	.+6      	; 0xdfe <__divmodsi4_neg2>
 df8:	4e f4       	brtc	.+18     	; 0xe0c <__divmodsi4_exit>
 dfa:	0c 94 07 07 	jmp	0xe0e	; 0xe0e <__negsi2>

00000dfe <__divmodsi4_neg2>:
 dfe:	50 95       	com	r21
 e00:	40 95       	com	r20
 e02:	30 95       	com	r19
 e04:	21 95       	neg	r18
 e06:	3f 4f       	sbci	r19, 0xFF	; 255
 e08:	4f 4f       	sbci	r20, 0xFF	; 255
 e0a:	5f 4f       	sbci	r21, 0xFF	; 255

00000e0c <__divmodsi4_exit>:
 e0c:	08 95       	ret

00000e0e <__negsi2>:
 e0e:	90 95       	com	r25
 e10:	80 95       	com	r24
 e12:	70 95       	com	r23
 e14:	61 95       	neg	r22
 e16:	7f 4f       	sbci	r23, 0xFF	; 255
 e18:	8f 4f       	sbci	r24, 0xFF	; 255
 e1a:	9f 4f       	sbci	r25, 0xFF	; 255
 e1c:	08 95       	ret

00000e1e <_exit>:
 e1e:	f8 94       	cli

00000e20 <__stop_program>:
 e20:	ff cf       	rjmp	.-2      	; 0xe20 <__stop_program>
